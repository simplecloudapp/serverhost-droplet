package app.simplecloud.droplet.serverhost.shared.docker

import app.simplecloud.droplet.serverhost.shared.hack.OS
import com.github.dockerjava.api.DockerClient
import com.github.dockerjava.core.DefaultDockerClientConfig
import com.github.dockerjava.core.DockerClientImpl
import com.github.dockerjava.httpclient5.ApacheDockerHttpClient
import java.io.FileInputStream
import java.io.FileOutputStream
import java.nio.file.Path
import java.time.Duration
import java.util.*
import kotlin.io.path.createDirectories
import kotlin.io.path.createFile
import kotlin.io.path.exists

object DockerClientInstance {
    fun new(settings: Path): DockerClient {
        val loaded: Properties
        if (settings.exists()) {
            loaded = Properties()
            FileInputStream(settings.toFile()).use { stream -> loaded.load(stream) }
        } else {
            loaded = createDefault(settings)
        }
        val config = DefaultDockerClientConfig.createDefaultConfigBuilder().withProperties(loaded).build()
        val httpClient = ApacheDockerHttpClient.Builder().dockerHost(config.dockerHost).sslConfig(config.sslConfig)
            .maxConnections(100)
            .connectionTimeout(Duration.ofSeconds(30))
            .responseTimeout(Duration.ofSeconds(45))
            .build();
        val dockerClient = DockerClientImpl.getInstance(config, httpClient)
        dockerClient.pingCmd().exec() //Ensure docker is running
        return dockerClient
    }

    private fun createDefault(settings: Path): Properties {
        if (settings.parent != null) {
            if (!settings.parent.exists()) {
                settings.parent.createDirectories()
            }
        }
        settings.createFile()

        val properties = Properties()
        when (OS.get()) {
            OS.WINDOWS -> {
                properties.setProperty("DOCKER_HOST", "npipe:////./pipe/docker_engine")
            }

            OS.LINUX, OS.MAC -> {
                properties.setProperty("DOCKER_HOST", "unix:///var/run/docker.sock")
            }

            null -> throw IllegalArgumentException("DockerClientInstance is not supported OS")
        }
        val out = FileOutputStream(settings.toFile())
        properties.store(
            out,
            "Generated by SimpleCloud v3. See https://github.com/docker-java/docker-java/blob/main/docs/getting_started.md#properties-docker-javaproperties for valid arguments."
        )
        out.close()
        return properties
    }
}